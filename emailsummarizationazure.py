# -*- coding: utf-8 -*-
"""EmailSummarizationAzure.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11UOryxlPdHm3PIBs8prYLfYxip7QzMh2
"""

import os
from openai import AzureOpenAI

endpoint = os.getenv("ENDPOINT_URL", "https://ai-mehaknauman6ai9219481888056792.openai.azure.com/")
deployment = os.getenv("DEPLOYMENT_NAME", "gpt-35-turbo")
subscription_key = os.getenv("AZURE_OPENAI_API_KEY", "9a38b6fa427a45eaba28ffa8bf4d88a6")

# Initialize Azure OpenAI client with key-based authentication
client = AzureOpenAI(
  azure_endpoint=endpoint,
  api_key=subscription_key,
  api_version="2024-05-01-preview",
)

import pandas as pd

df = pd.read_csv('emails.csv')

df.head()

email = df.iloc[1]['message']

print(email)

# Prepare the chat prompt
chat_prompt = [
  {
      "role": "system",
      "content": '''
        You are an AI that summarizes emails. Your job is to read an email and produce a concise summary. Ensure that the summary captures the main points, actions required, deadlines, and key information, if present. The summary should not include any opinionated or toxic content from the email. The tone should remain neutral and professional. Ignore any irrelevant or unnecessary details. Structure the summary as follows:
        1. Subject : [Summarize the Email Subject]
        2. Sender: [Who is the email from?]
        3. Summary: [A short overview of the email's content]
        4. KeyPoints:
          -  [Point 1]
          -  [Point 2]
          -  [Any deadlines or important actions]
      '''
  },
  {
      "role": "user",
      "content": email
  }
]

# Include speech result if speech is enabled
speech_result = chat_prompt

# Generate the completion
completion = client.chat.completions.create(
    model=deployment,
    messages=speech_result,
    # past_messages=10,
    max_tokens=800,
    temperature=0.7,
    top_p=0.95,
    frequency_penalty=0,
    presence_penalty=0,
    stop=None,
    stream=False
)

print(completion.to_json())

choices = completion.choices
email_choice = choices[0]

print(email_choice.message.content)